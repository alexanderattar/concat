# Grammar for statement query language
# just simple statements with no joins for now
#
# Compilation to query.peg.go:
#  go get github.com/pointlander/peg
#  peg -inline -switch query.peg

package query

type QueryParser Peg {
    *ParseState
}

Grammar <- Select WSX EOF { p.setSelectOp() }
         / Delete WSX EOF { p.setDeleteOp() }

Select <- 'SELECT' WS Selector
                   WS Source
                  (WS Criteria)?
                  (WS Order)?
                  (WS Limit)?

Delete <- 'DELETE' WS Source (WS Criteria)?

Selector <- SimpleSelector   { p.setSimpleSelector() }
          / CompoundSelector { p.setCompoundSelector() }
          / FunctionSelector { p.setFunctionSelector() }

SimpleSelector <- < SimpleSelectorOp > { p.push(text) }
SimpleSelectorOp <- '*'
                  / 'body'
                  / 'id'
                  / 'publisher'
                  / 'namespace'
                  / 'source'
                  / 'timestamp'
                  / 'counter'

CompoundSelector <- '(' SimpleSelector ( ',' WSX SimpleSelector )* ')'

FunctionSelector <- Function '(' SimpleSelector ')'

Function   <- < FunctionOp > { p.push(text) }
FunctionOp <- 'COUNT'
            / 'MIN'
            / 'MAX'

Source <- 'FROM' WS Namespace { p.setNamespace(text) }

Namespace <- < NamespacePart ( '.' NamespacePart )* ('.' Wildcard)? >
           / < Wildcard >

NamespacePart <- [a-zA-Z0-9-]+
Wildcard <- '*'

Criteria <- 'WHERE' WS MultiCriteria { p.setCriteria() }

MultiCriteria <- CompoundCriteria (WS Boolean WS CompoundCriteria { p.addCompoundCriteria() })*

CompoundCriteria <- SimpleCriteria
                  / '(' MultiCriteria ')'
                  / 'NOT' WS CompoundCriteria { p.addNegatedCriteria() }

SimpleCriteria <- ValueCriteria { p.addValueCriteria() }
                / RangeCriteria  { p.addRangeCriteria() }
                / IndexCriteria { p.addIndexCriteria() }

ValueCriteria <- IdCriteria
               / PublisherCriteria 
               / SourceCriteria

IdCriteria        <- < 'id' >        { p.push(text) } WSX ValueCompare WSX StatementId { p.push(text) }
PublisherCriteria <- < 'publisher' > { p.push(text) } WSX ValueCompare WSX PublisherId { p.push(text) }
SourceCriteria    <- < 'source' >    { p.push(text) } WSX ValueCompare WSX PublisherId { p.push(text) }

ValueCompare   <- < ValueCompareOp > { p.push(text) }
ValueCompareOp <- '='
                / '!='

RangeCriteria <- RangeSelector WSX Comparison WSX UInt { p.push(text) }

RangeSelector   <- < RangeSelectorOp > { p.push(text) }
RangeSelectorOp <- 'timestamp'
                 / 'counter'

Boolean   <- < BooleanOp > { p.push(text) }
BooleanOp <- 'AND'
           / 'OR'

Comparison   <- < ComparisonOp > { p.push(text) }
ComparisonOp <- '<='
              / '<'
              / '='
              / '!='
              / '>='
              / '>'

IndexCriteria <- WKICriteria

WKICriteria <- < 'wki' > { p.push(text) } WSX '=' WSX WKI { p.push(text) }

Order <- 'ORDER' WS 'BY' WS OrderSpec { p.setOrder() }

OrderSpec <- OrderSelectorSpec (',' WSX OrderSelectorSpec)*

OrderSelectorSpec <- OrderSelector { p.addOrderSelector() } (WS OrderDir { p.setOrderDir() })?

OrderSelector   <- < OrderSelectorOp > { p.push(text) }
OrderSelectorOp <- 'id'
                 / 'namespace'
                 / 'publisher'
                 / 'source'
                 / 'timestamp'
                 / 'counter'
                 
OrderDir   <- < OrderDirOp > { p.push(text) }
OrderDirOp <- 'ASC'
            / 'DESC'

Limit <- 'LIMIT' WS UInt { p.setLimit(text) }

# Lexemes
StatementId <- < [a-zA-Z0-9:]+ >
PublisherId <- < [a-zA-Z0-9]+ >
WKI         <- < [-a-zA-Z0-9:_]+ >
UInt        <- < [0-9]+ >
WS          <- WhiteSpace+
WSX         <- WhiteSpace*
WhiteSpace  <- ' ' / '\t' / EOL
EOL         <- '\r\n' / '\n' / '\r'
EOF	        <- !.
