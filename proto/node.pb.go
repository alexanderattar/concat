// Code generated by protoc-gen-gogo.
// source: node.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// end of result stream marker
type StreamEnd struct {
}

func (m *StreamEnd) Reset()                    { *m = StreamEnd{} }
func (m *StreamEnd) String() string            { return proto1.CompactTextString(m) }
func (*StreamEnd) ProtoMessage()               {}
func (*StreamEnd) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{0} }

// stream errors
type StreamError struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *StreamError) Reset()                    { *m = StreamError{} }
func (m *StreamError) String() string            { return proto1.CompactTextString(m) }
func (*StreamError) ProtoMessage()               {}
func (*StreamError) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{1} }

// /mediachain/node/ping
type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto1.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{2} }

type Pong struct {
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto1.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{3} }

// /mediachain/node/query
type QueryRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{4} }

type QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*QueryResult_Value
	//	*QueryResult_End
	//	*QueryResult_Error
	Result isQueryResult_Result `protobuf_oneof:"result"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto1.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{5} }

type isQueryResult_Result interface {
	isQueryResult_Result()
}

type QueryResult_Value struct {
	Value *QueryResultValue `protobuf:"bytes,1,opt,name=value,oneof"`
}
type QueryResult_End struct {
	End *StreamEnd `protobuf:"bytes,2,opt,name=end,oneof"`
}
type QueryResult_Error struct {
	Error *StreamError `protobuf:"bytes,3,opt,name=error,oneof"`
}

func (*QueryResult_Value) isQueryResult_Result() {}
func (*QueryResult_End) isQueryResult_Result()   {}
func (*QueryResult_Error) isQueryResult_Result() {}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryResult) GetValue() *QueryResultValue {
	if x, ok := m.GetResult().(*QueryResult_Value); ok {
		return x.Value
	}
	return nil
}

func (m *QueryResult) GetEnd() *StreamEnd {
	if x, ok := m.GetResult().(*QueryResult_End); ok {
		return x.End
	}
	return nil
}

func (m *QueryResult) GetError() *StreamError {
	if x, ok := m.GetResult().(*QueryResult_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryResult) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _QueryResult_OneofMarshaler, _QueryResult_OneofUnmarshaler, _QueryResult_OneofSizer, []interface{}{
		(*QueryResult_Value)(nil),
		(*QueryResult_End)(nil),
		(*QueryResult_Error)(nil),
	}
}

func _QueryResult_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Value:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Value); err != nil {
			return err
		}
	case *QueryResult_End:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.End); err != nil {
			return err
		}
	case *QueryResult_Error:
		_ = b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QueryResult.Result has unexpected type %T", x)
	}
	return nil
}

func _QueryResult_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*QueryResult)
	switch tag {
	case 1: // result.value
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(QueryResultValue)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Value{msg}
		return true, err
	case 2: // result.end
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StreamEnd)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_End{msg}
		return true, err
	case 3: // result.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StreamError)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QueryResult_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Value:
		s := proto1.Size(x.Value)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *QueryResult_End:
		s := proto1.Size(x.End)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type QueryResultValue struct {
	// Types that are valid to be assigned to Value:
	//	*QueryResultValue_Simple
	//	*QueryResultValue_Compound
	Value isQueryResultValue_Value `protobuf_oneof:"value"`
}

func (m *QueryResultValue) Reset()                    { *m = QueryResultValue{} }
func (m *QueryResultValue) String() string            { return proto1.CompactTextString(m) }
func (*QueryResultValue) ProtoMessage()               {}
func (*QueryResultValue) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{6} }

type isQueryResultValue_Value interface {
	isQueryResultValue_Value()
}

type QueryResultValue_Simple struct {
	Simple *SimpleValue `protobuf:"bytes,1,opt,name=simple,oneof"`
}
type QueryResultValue_Compound struct {
	Compound *CompoundValue `protobuf:"bytes,2,opt,name=compound,oneof"`
}

func (*QueryResultValue_Simple) isQueryResultValue_Value()   {}
func (*QueryResultValue_Compound) isQueryResultValue_Value() {}

func (m *QueryResultValue) GetValue() isQueryResultValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *QueryResultValue) GetSimple() *SimpleValue {
	if x, ok := m.GetValue().(*QueryResultValue_Simple); ok {
		return x.Simple
	}
	return nil
}

func (m *QueryResultValue) GetCompound() *CompoundValue {
	if x, ok := m.GetValue().(*QueryResultValue_Compound); ok {
		return x.Compound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryResultValue) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _QueryResultValue_OneofMarshaler, _QueryResultValue_OneofUnmarshaler, _QueryResultValue_OneofSizer, []interface{}{
		(*QueryResultValue_Simple)(nil),
		(*QueryResultValue_Compound)(nil),
	}
}

func _QueryResultValue_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*QueryResultValue)
	// value
	switch x := m.Value.(type) {
	case *QueryResultValue_Simple:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Simple); err != nil {
			return err
		}
	case *QueryResultValue_Compound:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Compound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QueryResultValue.Value has unexpected type %T", x)
	}
	return nil
}

func _QueryResultValue_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*QueryResultValue)
	switch tag {
	case 1: // value.simple
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SimpleValue)
		err := b.DecodeMessage(msg)
		m.Value = &QueryResultValue_Simple{msg}
		return true, err
	case 2: // value.compound
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CompoundValue)
		err := b.DecodeMessage(msg)
		m.Value = &QueryResultValue_Compound{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QueryResultValue_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*QueryResultValue)
	// value
	switch x := m.Value.(type) {
	case *QueryResultValue_Simple:
		s := proto1.Size(x.Simple)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *QueryResultValue_Compound:
		s := proto1.Size(x.Compound)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SimpleValue struct {
	// Types that are valid to be assigned to Value:
	//	*SimpleValue_IntValue
	//	*SimpleValue_StringValue
	//	*SimpleValue_Stmt
	//	*SimpleValue_StmtBody
	Value isSimpleValue_Value `protobuf_oneof:"value"`
}

func (m *SimpleValue) Reset()                    { *m = SimpleValue{} }
func (m *SimpleValue) String() string            { return proto1.CompactTextString(m) }
func (*SimpleValue) ProtoMessage()               {}
func (*SimpleValue) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{7} }

type isSimpleValue_Value interface {
	isSimpleValue_Value()
}

type SimpleValue_IntValue struct {
	IntValue int64 `protobuf:"varint,1,opt,name=intValue,proto3,oneof"`
}
type SimpleValue_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=stringValue,proto3,oneof"`
}
type SimpleValue_Stmt struct {
	Stmt *Statement `protobuf:"bytes,3,opt,name=stmt,oneof"`
}
type SimpleValue_StmtBody struct {
	StmtBody *StatementBody `protobuf:"bytes,4,opt,name=stmtBody,oneof"`
}

func (*SimpleValue_IntValue) isSimpleValue_Value()    {}
func (*SimpleValue_StringValue) isSimpleValue_Value() {}
func (*SimpleValue_Stmt) isSimpleValue_Value()        {}
func (*SimpleValue_StmtBody) isSimpleValue_Value()    {}

func (m *SimpleValue) GetValue() isSimpleValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SimpleValue) GetIntValue() int64 {
	if x, ok := m.GetValue().(*SimpleValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *SimpleValue) GetStringValue() string {
	if x, ok := m.GetValue().(*SimpleValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *SimpleValue) GetStmt() *Statement {
	if x, ok := m.GetValue().(*SimpleValue_Stmt); ok {
		return x.Stmt
	}
	return nil
}

func (m *SimpleValue) GetStmtBody() *StatementBody {
	if x, ok := m.GetValue().(*SimpleValue_StmtBody); ok {
		return x.StmtBody
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleValue) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _SimpleValue_OneofMarshaler, _SimpleValue_OneofUnmarshaler, _SimpleValue_OneofSizer, []interface{}{
		(*SimpleValue_IntValue)(nil),
		(*SimpleValue_StringValue)(nil),
		(*SimpleValue_Stmt)(nil),
		(*SimpleValue_StmtBody)(nil),
	}
}

func _SimpleValue_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*SimpleValue)
	// value
	switch x := m.Value.(type) {
	case *SimpleValue_IntValue:
		_ = b.EncodeVarint(1<<3 | proto1.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntValue))
	case *SimpleValue_StringValue:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *SimpleValue_Stmt:
		_ = b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Stmt); err != nil {
			return err
		}
	case *SimpleValue_StmtBody:
		_ = b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.StmtBody); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimpleValue.Value has unexpected type %T", x)
	}
	return nil
}

func _SimpleValue_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*SimpleValue)
	switch tag {
	case 1: // value.intValue
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &SimpleValue_IntValue{int64(x)}
		return true, err
	case 2: // value.stringValue
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &SimpleValue_StringValue{x}
		return true, err
	case 3: // value.stmt
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Statement)
		err := b.DecodeMessage(msg)
		m.Value = &SimpleValue_Stmt{msg}
		return true, err
	case 4: // value.stmtBody
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StatementBody)
		err := b.DecodeMessage(msg)
		m.Value = &SimpleValue_StmtBody{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleValue_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*SimpleValue)
	// value
	switch x := m.Value.(type) {
	case *SimpleValue_IntValue:
		n += proto1.SizeVarint(1<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.IntValue))
	case *SimpleValue_StringValue:
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *SimpleValue_Stmt:
		s := proto1.Size(x.Stmt)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *SimpleValue_StmtBody:
		s := proto1.Size(x.StmtBody)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CompoundValue struct {
	Body []*KeyValuePair `protobuf:"bytes,1,rep,name=body" json:"body,omitempty"`
}

func (m *CompoundValue) Reset()                    { *m = CompoundValue{} }
func (m *CompoundValue) String() string            { return proto1.CompactTextString(m) }
func (*CompoundValue) ProtoMessage()               {}
func (*CompoundValue) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{8} }

func (m *CompoundValue) GetBody() []*KeyValuePair {
	if m != nil {
		return m.Body
	}
	return nil
}

type KeyValuePair struct {
	Key   string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *SimpleValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto1.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{9} }

func (m *KeyValuePair) GetValue() *SimpleValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// /mediachain/node/data
type DataRequest struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *DataRequest) Reset()                    { *m = DataRequest{} }
func (m *DataRequest) String() string            { return proto1.CompactTextString(m) }
func (*DataRequest) ProtoMessage()               {}
func (*DataRequest) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{10} }

type DataResult struct {
	// Types that are valid to be assigned to Result:
	//	*DataResult_Data
	//	*DataResult_End
	//	*DataResult_Error
	Result isDataResult_Result `protobuf_oneof:"result"`
}

func (m *DataResult) Reset()                    { *m = DataResult{} }
func (m *DataResult) String() string            { return proto1.CompactTextString(m) }
func (*DataResult) ProtoMessage()               {}
func (*DataResult) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{11} }

type isDataResult_Result interface {
	isDataResult_Result()
}

type DataResult_Data struct {
	Data *DataObject `protobuf:"bytes,1,opt,name=data,oneof"`
}
type DataResult_End struct {
	End *StreamEnd `protobuf:"bytes,2,opt,name=end,oneof"`
}
type DataResult_Error struct {
	Error *StreamError `protobuf:"bytes,3,opt,name=error,oneof"`
}

func (*DataResult_Data) isDataResult_Result()  {}
func (*DataResult_End) isDataResult_Result()   {}
func (*DataResult_Error) isDataResult_Result() {}

func (m *DataResult) GetResult() isDataResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DataResult) GetData() *DataObject {
	if x, ok := m.GetResult().(*DataResult_Data); ok {
		return x.Data
	}
	return nil
}

func (m *DataResult) GetEnd() *StreamEnd {
	if x, ok := m.GetResult().(*DataResult_End); ok {
		return x.End
	}
	return nil
}

func (m *DataResult) GetError() *StreamError {
	if x, ok := m.GetResult().(*DataResult_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataResult) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _DataResult_OneofMarshaler, _DataResult_OneofUnmarshaler, _DataResult_OneofSizer, []interface{}{
		(*DataResult_Data)(nil),
		(*DataResult_End)(nil),
		(*DataResult_Error)(nil),
	}
}

func _DataResult_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*DataResult)
	// result
	switch x := m.Result.(type) {
	case *DataResult_Data:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *DataResult_End:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.End); err != nil {
			return err
		}
	case *DataResult_Error:
		_ = b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataResult.Result has unexpected type %T", x)
	}
	return nil
}

func _DataResult_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*DataResult)
	switch tag {
	case 1: // result.data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DataObject)
		err := b.DecodeMessage(msg)
		m.Result = &DataResult_Data{msg}
		return true, err
	case 2: // result.end
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StreamEnd)
		err := b.DecodeMessage(msg)
		m.Result = &DataResult_End{msg}
		return true, err
	case 3: // result.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StreamError)
		err := b.DecodeMessage(msg)
		m.Result = &DataResult_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataResult_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*DataResult)
	// result
	switch x := m.Result.(type) {
	case *DataResult_Data:
		s := proto1.Size(x.Data)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *DataResult_End:
		s := proto1.Size(x.End)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *DataResult_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DataObject struct {
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataObject) Reset()                    { *m = DataObject{} }
func (m *DataObject) String() string            { return proto1.CompactTextString(m) }
func (*DataObject) ProtoMessage()               {}
func (*DataObject) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{12} }

func init() {
	proto1.RegisterType((*StreamEnd)(nil), "proto.StreamEnd")
	proto1.RegisterType((*StreamError)(nil), "proto.StreamError")
	proto1.RegisterType((*Ping)(nil), "proto.Ping")
	proto1.RegisterType((*Pong)(nil), "proto.Pong")
	proto1.RegisterType((*QueryRequest)(nil), "proto.QueryRequest")
	proto1.RegisterType((*QueryResult)(nil), "proto.QueryResult")
	proto1.RegisterType((*QueryResultValue)(nil), "proto.QueryResultValue")
	proto1.RegisterType((*SimpleValue)(nil), "proto.SimpleValue")
	proto1.RegisterType((*CompoundValue)(nil), "proto.CompoundValue")
	proto1.RegisterType((*KeyValuePair)(nil), "proto.KeyValuePair")
	proto1.RegisterType((*DataRequest)(nil), "proto.DataRequest")
	proto1.RegisterType((*DataResult)(nil), "proto.DataResult")
	proto1.RegisterType((*DataObject)(nil), "proto.DataObject")
}

func init() { proto1.RegisterFile("node.proto", fileDescriptorNode) }

var fileDescriptorNode = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x9b, 0x4d, 0x5a, 0xda, 0x49, 0x91, 0xca, 0xb0, 0x12, 0x15, 0xe2, 0xb0, 0x98, 0x15,
	0x5b, 0x21, 0xb4, 0x48, 0xe5, 0xc2, 0xb9, 0x80, 0x54, 0xc1, 0x81, 0x25, 0x48, 0xdc, 0xdd, 0x8d,
	0x55, 0x85, 0x6d, 0xec, 0xae, 0xe3, 0x20, 0xf5, 0xc0, 0x43, 0x70, 0xe5, 0x39, 0x78, 0x40, 0x34,
	0x63, 0x3b, 0x6d, 0x11, 0x1c, 0xf7, 0x64, 0x7b, 0xe6, 0x9b, 0xf9, 0xff, 0x4c, 0x06, 0x40, 0x9b,
	0x52, 0x5d, 0x6e, 0xad, 0x71, 0x06, 0xfb, 0x7c, 0x3c, 0x86, 0xc6, 0xd5, 0xce, 0x87, 0x44, 0x0e,
	0xa3, 0x2f, 0xce, 0x2a, 0x59, 0xbf, 0xd7, 0xa5, 0x78, 0x06, 0x79, 0x78, 0x58, 0x6b, 0x2c, 0x9e,
	0x42, 0x5f, 0xd1, 0x65, 0x9a, 0x9c, 0x25, 0xb3, 0x51, 0xe1, 0x1f, 0x62, 0x00, 0xd9, 0x55, 0xa5,
	0xd7, 0x7c, 0x1a, 0xbd, 0x16, 0xe7, 0x30, 0xfe, 0xdc, 0x2a, 0xbb, 0x2b, 0xd4, 0x6d, 0xab, 0x1a,
	0x47, 0x55, 0xb7, 0xf4, 0x8e, 0x55, 0xfc, 0x10, 0xbf, 0x12, 0xc8, 0x03, 0xd6, 0xb4, 0x1b, 0x87,
	0xaf, 0xa0, 0xff, 0x5d, 0x6e, 0x5a, 0xc5, 0x54, 0x3e, 0x7f, 0xe4, 0xed, 0x5c, 0x1e, 0x20, 0x5f,
	0x29, 0xbd, 0xec, 0x15, 0x9e, 0xc3, 0x73, 0x48, 0x95, 0x2e, 0xa7, 0x27, 0x8c, 0x4f, 0x02, 0xde,
	0x59, 0x5f, 0xf6, 0x0a, 0x4a, 0xe3, 0x8b, 0x68, 0x39, 0x65, 0x0e, 0x8f, 0x39, 0xca, 0x50, 0x47,
	0x46, 0x16, 0x43, 0x18, 0x58, 0x56, 0x12, 0x3f, 0x60, 0xf2, 0xb7, 0x30, 0xbe, 0x84, 0x41, 0x53,
	0xd5, 0xdb, 0x4d, 0x74, 0xd8, 0xb5, 0xe2, 0x60, 0x34, 0x17, 0x18, 0x9c, 0xc3, 0xf0, 0xda, 0xd4,
	0x5b, 0xd3, 0x76, 0x16, 0x4f, 0x03, 0xff, 0x36, 0x84, 0x63, 0x45, 0xc7, 0x2d, 0xee, 0x85, 0x11,
	0x88, 0xdf, 0x09, 0xe4, 0x07, 0x6d, 0xf1, 0x09, 0x0c, 0x2b, 0xed, 0x6d, 0xb0, 0x78, 0x4a, 0x65,
	0x31, 0x82, 0x02, 0xf2, 0xc6, 0xd9, 0x4a, 0xaf, 0x3d, 0x40, 0x6a, 0xa3, 0x65, 0xaf, 0x38, 0x0c,
	0xe2, 0x73, 0xc8, 0xe8, 0x1f, 0x87, 0x29, 0xec, 0xa7, 0x25, 0x9d, 0xaa, 0x95, 0x76, 0xcb, 0x5e,
	0xc1, 0x79, 0xb2, 0x4d, 0xe7, 0xc2, 0x94, 0xbb, 0x69, 0x76, 0x64, 0xbb, 0x63, 0x29, 0x47, 0xfa,
	0x91, 0xdb, 0xdb, 0x7e, 0x03, 0xf7, 0x8f, 0x3e, 0x0e, 0x2f, 0x20, 0x5b, 0x51, 0xa7, 0xe4, 0x2c,
	0x9d, 0xe5, 0xf3, 0x87, 0xa1, 0xd3, 0x47, 0xb5, 0xe3, 0xf4, 0x95, 0xac, 0x6c, 0xc1, 0x80, 0xf8,
	0x00, 0xe3, 0xc3, 0x28, 0x4e, 0x20, 0xbd, 0x51, 0x71, 0x61, 0xe8, 0x8a, 0xb3, 0xb8, 0x1e, 0x27,
	0xff, 0x1b, 0x7e, 0xd8, 0x0b, 0xf1, 0x14, 0xf2, 0x77, 0xd2, 0xc9, 0xb8, 0x7d, 0x08, 0xd9, 0x8d,
	0xda, 0x35, 0xec, 0x61, 0x54, 0xf0, 0x5d, 0xfc, 0x4c, 0x00, 0x3c, 0xc3, 0xab, 0x77, 0x01, 0x59,
	0x29, 0x9d, 0x0c, 0xff, 0xf5, 0x41, 0x68, 0x4d, 0xc0, 0xa7, 0xd5, 0x37, 0x75, 0xcd, 0xd3, 0x21,
	0xe0, 0x4e, 0x57, 0x6e, 0xee, 0x2d, 0x79, 0xc5, 0x7f, 0x0c, 0x00, 0x83, 0x49, 0x12, 0x1f, 0x7b,
	0x3f, 0xab, 0x01, 0x77, 0x7e, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xc1, 0x65, 0x36, 0xd3,
	0x03, 0x00, 0x00,
}
