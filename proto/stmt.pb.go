// Code generated by protoc-gen-gogo.
// source: stmt.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	stmt.proto

It has these top-level messages:
	Statement
	SimpleStatement
	CompoundStatement
	ArchiveStatement
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Statement struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Publisher string `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*Statement_Simple
	//	*Statement_Compound
	//	*Statement_Archive
	//	*Statement_Envelope
	Body isStatement_Body `protobuf_oneof:"body"`
	Sig  []byte           `protobuf:"bytes,8,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *Statement) Reset()         { *m = Statement{} }
func (m *Statement) String() string { return proto1.CompactTextString(m) }
func (*Statement) ProtoMessage()    {}

type isStatement_Body interface {
	isStatement_Body()
}

type Statement_Simple struct {
	Simple *SimpleStatement `protobuf:"bytes,4,opt,name=simple,oneof"`
}
type Statement_Compound struct {
	Compound *CompoundStatement `protobuf:"bytes,5,opt,name=compound,oneof"`
}
type Statement_Archive struct {
	Archive *ArchiveStatement `protobuf:"bytes,6,opt,name=archive,oneof"`
}
type Statement_Envelope struct {
	Envelope *Statement `protobuf:"bytes,7,opt,name=envelope,oneof"`
}

func (*Statement_Simple) isStatement_Body()   {}
func (*Statement_Compound) isStatement_Body() {}
func (*Statement_Archive) isStatement_Body()  {}
func (*Statement_Envelope) isStatement_Body() {}

func (m *Statement) GetBody() isStatement_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Statement) GetSimple() *SimpleStatement {
	if x, ok := m.GetBody().(*Statement_Simple); ok {
		return x.Simple
	}
	return nil
}

func (m *Statement) GetCompound() *CompoundStatement {
	if x, ok := m.GetBody().(*Statement_Compound); ok {
		return x.Compound
	}
	return nil
}

func (m *Statement) GetArchive() *ArchiveStatement {
	if x, ok := m.GetBody().(*Statement_Archive); ok {
		return x.Archive
	}
	return nil
}

func (m *Statement) GetEnvelope() *Statement {
	if x, ok := m.GetBody().(*Statement_Envelope); ok {
		return x.Envelope
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Statement) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), []interface{}) {
	return _Statement_OneofMarshaler, _Statement_OneofUnmarshaler, []interface{}{
		(*Statement_Simple)(nil),
		(*Statement_Compound)(nil),
		(*Statement_Archive)(nil),
		(*Statement_Envelope)(nil),
	}
}

func _Statement_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Statement)
	// body
	switch x := m.Body.(type) {
	case *Statement_Simple:
		_ = b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Simple); err != nil {
			return err
		}
	case *Statement_Compound:
		_ = b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Compound); err != nil {
			return err
		}
	case *Statement_Archive:
		_ = b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Archive); err != nil {
			return err
		}
	case *Statement_Envelope:
		_ = b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Envelope); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Statement.Body has unexpected type %T", x)
	}
	return nil
}

func _Statement_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Statement)
	switch tag {
	case 4: // body.simple
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SimpleStatement)
		err := b.DecodeMessage(msg)
		m.Body = &Statement_Simple{msg}
		return true, err
	case 5: // body.compound
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CompoundStatement)
		err := b.DecodeMessage(msg)
		m.Body = &Statement_Compound{msg}
		return true, err
	case 6: // body.archive
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ArchiveStatement)
		err := b.DecodeMessage(msg)
		m.Body = &Statement_Archive{msg}
		return true, err
	case 7: // body.envelope
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Statement)
		err := b.DecodeMessage(msg)
		m.Body = &Statement_Envelope{msg}
		return true, err
	default:
		return false, nil
	}
}

type SimpleStatement struct {
	Object string   `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Refs   []string `protobuf:"bytes,2,rep,name=refs" json:"refs,omitempty"`
	Tags   []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *SimpleStatement) Reset()         { *m = SimpleStatement{} }
func (m *SimpleStatement) String() string { return proto1.CompactTextString(m) }
func (*SimpleStatement) ProtoMessage()    {}

type CompoundStatement struct {
	Statements []*SimpleStatement `protobuf:"bytes,1,rep,name=statements" json:"statements,omitempty"`
}

func (m *CompoundStatement) Reset()         { *m = CompoundStatement{} }
func (m *CompoundStatement) String() string { return proto1.CompactTextString(m) }
func (*CompoundStatement) ProtoMessage()    {}

func (m *CompoundStatement) GetStatements() []*SimpleStatement {
	if m != nil {
		return m.Statements
	}
	return nil
}

type ArchiveStatement struct {
}

func (m *ArchiveStatement) Reset()         { *m = ArchiveStatement{} }
func (m *ArchiveStatement) String() string { return proto1.CompactTextString(m) }
func (*ArchiveStatement) ProtoMessage()    {}

func init() {
	proto1.RegisterType((*Statement)(nil), "proto.Statement")
	proto1.RegisterType((*SimpleStatement)(nil), "proto.SimpleStatement")
	proto1.RegisterType((*CompoundStatement)(nil), "proto.CompoundStatement")
	proto1.RegisterType((*ArchiveStatement)(nil), "proto.ArchiveStatement")
}
